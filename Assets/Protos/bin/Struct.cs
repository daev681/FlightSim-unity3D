// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Struct.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protocol {

  /// <summary>Holder for reflection information generated from Struct.proto</summary>
  public static partial class StructReflection {

    #region Descriptor
    /// <summary>File descriptor for Struct.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StructReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxTdHJ1Y3QucHJvdG8SCFByb3RvY29sGgpFbnVtLnByb3RvIpQBCgZQbGF5",
            "ZXISCgoCaWQYASABKAQSDAoEbmFtZRgCIAEoCRIoCgpwbGF5ZXJUeXBlGAMg",
            "ASgOMhQuUHJvdG9jb2wuUGxheWVyVHlwZRIKCgJweBgEIAEoAhIKCgJweRgF",
            "IAEoAhIKCgJwehgGIAEoAhIKCgJyeBgHIAEoAhIKCgJyeRgIIAEoAhIKCgJy",
            "ehgJIAEoAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Protocol.EnumReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Player), global::Protocol.Player.Parser, new[]{ "Id", "Name", "PlayerType", "Px", "Py", "Pz", "Rx", "Ry", "Rz" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Player : pb::IMessage<Player>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.StructReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player(Player other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      playerType_ = other.playerType_;
      px_ = other.px_;
      py_ = other.py_;
      pz_ = other.pz_;
      rx_ = other.rx_;
      ry_ = other.ry_;
      rz_ = other.rz_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player Clone() {
      return new Player(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playerType" field.</summary>
    public const int PlayerTypeFieldNumber = 3;
    private global::Protocol.PlayerType playerType_ = global::Protocol.PlayerType.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.PlayerType PlayerType {
      get { return playerType_; }
      set {
        playerType_ = value;
      }
    }

    /// <summary>Field number for the "px" field.</summary>
    public const int PxFieldNumber = 4;
    private float px_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Px {
      get { return px_; }
      set {
        px_ = value;
      }
    }

    /// <summary>Field number for the "py" field.</summary>
    public const int PyFieldNumber = 5;
    private float py_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Py {
      get { return py_; }
      set {
        py_ = value;
      }
    }

    /// <summary>Field number for the "pz" field.</summary>
    public const int PzFieldNumber = 6;
    private float pz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Pz {
      get { return pz_; }
      set {
        pz_ = value;
      }
    }

    /// <summary>Field number for the "rx" field.</summary>
    public const int RxFieldNumber = 7;
    private float rx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rx {
      get { return rx_; }
      set {
        rx_ = value;
      }
    }

    /// <summary>Field number for the "ry" field.</summary>
    public const int RyFieldNumber = 8;
    private float ry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Ry {
      get { return ry_; }
      set {
        ry_ = value;
      }
    }

    /// <summary>Field number for the "rz" field.</summary>
    public const int RzFieldNumber = 9;
    private float rz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rz {
      get { return rz_; }
      set {
        rz_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (PlayerType != other.PlayerType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Px, other.Px)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Py, other.Py)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Pz, other.Pz)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rx, other.Rx)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ry, other.Ry)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rz, other.Rz)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (PlayerType != global::Protocol.PlayerType.None) hash ^= PlayerType.GetHashCode();
      if (Px != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Px);
      if (Py != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Py);
      if (Pz != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Pz);
      if (Rx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rx);
      if (Ry != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ry);
      if (Rz != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rz);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (PlayerType != global::Protocol.PlayerType.None) {
        output.WriteRawTag(24);
        output.WriteEnum((int) PlayerType);
      }
      if (Px != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Px);
      }
      if (Py != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Py);
      }
      if (Pz != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Pz);
      }
      if (Rx != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Rx);
      }
      if (Ry != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Ry);
      }
      if (Rz != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Rz);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (PlayerType != global::Protocol.PlayerType.None) {
        output.WriteRawTag(24);
        output.WriteEnum((int) PlayerType);
      }
      if (Px != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Px);
      }
      if (Py != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Py);
      }
      if (Pz != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Pz);
      }
      if (Rx != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Rx);
      }
      if (Ry != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Ry);
      }
      if (Rz != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Rz);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (PlayerType != global::Protocol.PlayerType.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PlayerType);
      }
      if (Px != 0F) {
        size += 1 + 4;
      }
      if (Py != 0F) {
        size += 1 + 4;
      }
      if (Pz != 0F) {
        size += 1 + 4;
      }
      if (Rx != 0F) {
        size += 1 + 4;
      }
      if (Ry != 0F) {
        size += 1 + 4;
      }
      if (Rz != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.PlayerType != global::Protocol.PlayerType.None) {
        PlayerType = other.PlayerType;
      }
      if (other.Px != 0F) {
        Px = other.Px;
      }
      if (other.Py != 0F) {
        Py = other.Py;
      }
      if (other.Pz != 0F) {
        Pz = other.Pz;
      }
      if (other.Rx != 0F) {
        Rx = other.Rx;
      }
      if (other.Ry != 0F) {
        Ry = other.Ry;
      }
      if (other.Rz != 0F) {
        Rz = other.Rz;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            PlayerType = (global::Protocol.PlayerType) input.ReadEnum();
            break;
          }
          case 37: {
            Px = input.ReadFloat();
            break;
          }
          case 45: {
            Py = input.ReadFloat();
            break;
          }
          case 53: {
            Pz = input.ReadFloat();
            break;
          }
          case 61: {
            Rx = input.ReadFloat();
            break;
          }
          case 69: {
            Ry = input.ReadFloat();
            break;
          }
          case 77: {
            Rz = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            PlayerType = (global::Protocol.PlayerType) input.ReadEnum();
            break;
          }
          case 37: {
            Px = input.ReadFloat();
            break;
          }
          case 45: {
            Py = input.ReadFloat();
            break;
          }
          case 53: {
            Pz = input.ReadFloat();
            break;
          }
          case 61: {
            Rx = input.ReadFloat();
            break;
          }
          case 69: {
            Ry = input.ReadFloat();
            break;
          }
          case 77: {
            Rz = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
